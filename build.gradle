/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.6/samples
 */


plugins {
    id 'java-library'
	id 'application'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(14)
    }
}



tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(14)
    }
}

task('testsOn14', type: Test) {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(14)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'org.hibernate:hibernate-core:3.6.7.Final'
    api 'com.google.guava:guava:23.0'
    testImplementation 'junit:junit:4.+'
    
    //compile "com.oracle:ojdbc8:19.3.0.0")
    //compile "com.oracle.ojdbc:ojdbc8:19.3.0.0" 
    
    // https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8
	implementation 'com.oracle.database.jdbc:ojdbc8:23.3.0.23.09'

    
    // https://mvnrepository.com/artifact/log4j/log4j
	implementation 'log4j:log4j:1.2.17'
	
	// https://mvnrepository.com/artifact/mysql/mysql-connector-java
	//implementation 'mysql:mysql-connector-java:8.0.33'
	
	// https://mvnrepository.com/artifact/mysql/mysql-connector-java
	implementation 'mysql:mysql-connector-java:5.1.49'
	
	// https://mvnrepository.com/artifact/mysql/mysql-connector-java
	//implementation 'mysql:mysql-connector-java:6.0.6'
	
	
	
}

sourceSets.main.java.srcDirs = ['src']

sourceSets.main.resources.srcDirs = ['properties']

version = '1.0.1'

application {
    mainClass = 'com.sumaengine.KugoMain'
    //mainClass = 'com.sumaengine.CtrlCGood2'
}


task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.sumaengine.KugoMain'
        //attributes 'Main-Class': 'com.sumaengine.CtrlCGood2'
    }
    archiveBaseName = 'com.sumaengine-kugo-jar'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


